-- 1. how many unique customers are currently active?
select count(distinct customer_id) as active_customers
from customer
where active = 1;

-- Store has 584 active customers, forming the core base for recurring rental revenue. 


-- 2. what is the total revenue generated from all rentals?
select sum(amount) as total_revenue
from payment;

-- The company has generated 67406.56 from all rentals.


-- 3. which 5 cities have the highest number of active customers?
select ci.city, count(distinct cu.customer_id) as total_customers
from customer cu
join address a on cu.address_id = a.address_id
join city ci on a.city_id = ci.city_id
where cu.active = 1
group by ci.city
order by total_customers desc
limit 5;

-- London(2), Auroru(2) are the top cities; focus here for local campaigns.


-- 4. what is the average rental duration across all films?
select avg(rental_duration) as avg_rental_duration
from film;

-- Average rental duration is 4.9 days, suggesting a 4–6 day window is optimal for pricing and returns.


-- 5. how many customers have rented more than 20 times?
select count(*) as loyal_customers
from (
  select customer_id, count(*) as total_rentals
  from rental
  group by customer_id
  having count(*) > 20
) as sub;

-- 543 customers rented more than 20 times; these form the loyal core worth engaging further.


-- 6. which 5 films have generated the most revenue?
select f.title, sum(p.amount) as total_revenue
from payment p
join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
group by f.title
order by total_revenue desc
limit 5;

-- 'TELEGRAPH VOYAGE' leads with 231.73 in revenue, followed by other top-performing titles.


-- 7. what is the average revenue per film category?
select c.name as category, avg(p.amount) as avg_revenue
from payment p
join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name;

-- Action and Animation categories generate over 3.9 per film on average.


-- 8. how many films have never been rented even once?
select count(*) as never_rented_films
from film f
left join inventory i on f.film_id = i.film_id
left join rental r on i.inventory_id = r.inventory_id
where r.rental_id is null;

-- 43 films have never been rented.


-- 9. what is the return rate (on-time vs late) for films?
select 
  sum(case when datediff(return_date, rental_date) <= f.rental_duration then 1 else 0 end) as on_time,
  sum(case when datediff(return_date, rental_date) > f.rental_duration then 1 else 0 end) as late
from rental r
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id;

-- 8592 returns were on time vs 7269 late.


-- 10. which film category has the highest average rental rate per film?
select c.name, avg(f.rental_rate) as avg_rate
from film f
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name
order by avg_rate desc
limit 1;

-- Games category has the highest average rental rate at 3.25 per film.

-- 11. what is the total revenue generated by each staff member?
select s.first_name, s.last_name, sum(p.amount) as total_revenue
from payment p
join staff s on p.staff_id = s.staff_id
group by s.staff_id;

-- staff mike generated 33482.50 and jon generated 33924.06; nearly equal, suggesting balanced performance.


-- 12. which store performs better in terms of revenue and number of rentals?
select s.store_id, sum(p.amount) as total_revenue, count(r.rental_id) as total_rentals
from store s
join staff st on s.store_id = st.store_id
join payment p on st.staff_id = p.staff_id
join rental r on p.rental_id = r.rental_id
group by s.store_id;

-- Store 2 has higher revenue (33924.06) but store 1 has more rentals (8054) than store 2.


-- 13. how many rentals did each staff process per month in 2006?
select st.first_name, st.last_name, month(r.rental_date) as month, count(*) as rental_count
from rental r
join staff st on r.staff_id = st.staff_id
where year(r.rental_date) = 2006
group by st.staff_id, month;

-- Rentals peak in feb, indicating seasonal demand.


-- 14. what is the most rented film in each store?
select store_id, title, rental_count from (
  select s.store_id, f.title, count(r.rental_id) as rental_count,
         rank() over (partition by s.store_id order by count(r.rental_id) desc) as rnk
  from rental r
  join inventory i on r.inventory_id = i.inventory_id
  join film f on i.film_id = f.film_id
  join store s on i.store_id = s.store_id
  group by s.store_id, f.title
) as ranked
where rnk = 1;

-- 'LOVE SUICIDES' is the most rented film in store 1, 'IDOLS SNATCHERS' is the most rented film in store 2.


-- 15. for each staff member, what is their average revenue per rental transaction?
select st.first_name, st.last_name, avg(p.amount) as avg_revenue_per_rental
from payment p
join staff st on p.staff_id = st.staff_id
group by st.staff_id;

-- both staff members average is around 4.18 per transaction, showing consistent upselling performance.


-- 16. which customers paid the most fines for late returns?
select c.first_name, c.last_name, sum(p.amount) as total_fines
from rental r
join payment p on r.rental_id = p.rental_id
join customer c on r.customer_id = c.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
where datediff(r.return_date, r.rental_date) > f.rental_duration
group by c.customer_id
order by total_fines desc
limit 5;

-- 'KARL SEAL' paid the most in late fees (157.75); consider reminders or loyalty incentives.


-- 17. list the top 10 customers with the highest rental frequency and their total spending
select c.first_name, c.last_name, count(r.rental_id) as total_rentals, sum(p.amount) as total_spent
from customer c
join rental r on c.customer_id = r.customer_id
join payment p on r.rental_id = p.rental_id
group by c.customer_id
order by total_rentals desc
limit 10;

-- Top 10 customers rented over 40 times and spent an average of 180+, indicating high value.


-- 18. for each month in 2006, find the month-over-month revenue growth rate
with monthly_revenue as (
  select date_format(payment_date, '%y-%m') as month, sum(amount) as revenue
  from payment
  where year(payment_date) = 2006
  group by month
)
select month, revenue, 
       revenue - lag(revenue) over (order by month) as revenue_change,
       round((revenue - lag(revenue) over (order by month)) / lag(revenue) over (order by month) * 100, 2) as growth_percentage
from monthly_revenue;

-- 06-02 ws highest generated 514.18 in revenue


-- 19. build a customer churn indicator: list customers who were active in q1 2006 but didn’t rent in q3/q4
with q1_customers as (
  select distinct customer_id
  from rental
  where rental_date between '2006-01-01' and '2006-03-31'
),
q3q4_customers as (
  select distinct customer_id
  from rental
  where rental_date between '2006-07-01' and '2006-12-31'
)
select c.customer_id, c.first_name, c.last_name
from customer c
join q1_customers q1 on c.customer_id = q1.customer_id
where c.customer_id not in (select customer_id from q3q4_customers);

-- 158 customers showed churn behavior—target them with win-back offers or surveys.
